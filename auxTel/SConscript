# -*- python -*-

import lsst.sconsUtils
import glob
import os

# scons steals our environment away, so we have to reinstate it
env = lsst.sconsUtils.env.Clone()
for name in ("PYTHONPATH", "LD_LIBRARY_PATH",
             "DYLD_LIBRARY_PATH", "PATH"):
    if name in os.environ:
        env.AppendENVPath(name, os.environ[name])

# we may need an explicit library load path specified in the command
libpathstr = lsst.sconsUtils.utils.libraryLoaderEnvironment()

# We always run these commands with an explicit python rather than relying on the shebang
python = "{} python".format(libpathstr)

defectsDatList = glob.glob("defects/*/defects.dat")
for defectsDat in defectsDatList:
    command = "%s bin.src/genDefectFits.py auxTel %s --force" % (python, os.path.join("auxTel", defectsDat))
    commandInst = env.Command(defectsDat + "-fits", [defectsDat], command)
    env.Depends(commandInst, lsst.sconsUtils.targets["python"])
    env.AlwaysBuild(commandInst)

command = "%s bin.src/genDefectRegistry.py --root auxTel/defects" % (python)
commandInst = env.Command("defects/defectRegistry.sqlite3", [d + "-fits" for d in defectsDatList], command)
env.Depends(commandInst, lsst.sconsUtils.targets["python"])
registry = env.AlwaysBuild(commandInst)
